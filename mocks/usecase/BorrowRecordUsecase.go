// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/ericjovian/gin-template/dto"
	mock "github.com/stretchr/testify/mock"
)

// BorrowRecordUsecase is an autogenerated mock type for the BorrowRecordUsecase type
type BorrowRecordUsecase struct {
	mock.Mock
}

// CreateBorrowRecord provides a mock function with given fields: _a0
func (_m *BorrowRecordUsecase) CreateBorrowRecord(_a0 dto.BorrowRecordRequest) (*dto.BorrowRecordResponse, error) {
	ret := _m.Called(_a0)

	var r0 *dto.BorrowRecordResponse
	if rf, ok := ret.Get(0).(func(dto.BorrowRecordRequest) *dto.BorrowRecordResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.BorrowRecordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.BorrowRecordRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReturnBook provides a mock function with given fields: _a0
func (_m *BorrowRecordUsecase) ReturnBook(_a0 int) (*dto.BorrowRecordResponse, error) {
	ret := _m.Called(_a0)

	var r0 *dto.BorrowRecordResponse
	if rf, ok := ret.Get(0).(func(int) *dto.BorrowRecordResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.BorrowRecordResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBorrowRecordUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewBorrowRecordUsecase creates a new instance of BorrowRecordUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBorrowRecordUsecase(t mockConstructorTestingTNewBorrowRecordUsecase) *BorrowRecordUsecase {
	mock := &BorrowRecordUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
