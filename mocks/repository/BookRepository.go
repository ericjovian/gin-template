// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	entity "git.garena.com/sea-labs-id/batch-05/gin-template/entity"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// BookRepository is an autogenerated mock type for the BookRepository type
type BookRepository struct {
	mock.Mock
}

// AddQuantity provides a mock function with given fields: tx, id, qty
func (_m *BookRepository) AddQuantity(tx *gorm.DB, id int, qty int) error {
	ret := _m.Called(tx, id, qty)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, int, int) error); ok {
		r0 = rf(tx, id, qty)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields:
func (_m *BookRepository) Find() ([]*entity.Book, error) {
	ret := _m.Called()

	var r0 []*entity.Book
	if rf, ok := ret.Get(0).(func() []*entity.Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0
func (_m *BookRepository) GetById(_a0 int) (*entity.Book, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Book
	if rf, ok := ret.Get(0).(func(int) *entity.Book); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByTitle provides a mock function with given fields: _a0
func (_m *BookRepository) GetByTitle(_a0 string) (*entity.Book, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Book
	if rf, ok := ret.Get(0).(func(string) *entity.Book); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0
func (_m *BookRepository) Insert(_a0 entity.Book) (*entity.Book, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Book
	if rf, ok := ret.Get(0).(func(entity.Book) *entity.Book); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Book) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubstractQuantity provides a mock function with given fields: tx, id, qty
func (_m *BookRepository) SubstractQuantity(tx *gorm.DB, id int, qty int) error {
	ret := _m.Called(tx, id, qty)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, int, int) error); ok {
		r0 = rf(tx, id, qty)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBookRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookRepository creates a new instance of BookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookRepository(t mockConstructorTestingTNewBookRepository) *BookRepository {
	mock := &BookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
